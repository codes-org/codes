enable_testing()

configure_file(run-test.sh.in run-test.sh)

include_directories("${ROSS_INCLUDE_DIRS}" "${CODES_SOURCE_DIR}")

# Unfortunatelly, CMake doesn't support iteration of a key-pair structure,
# otherwise the following lists could be easily compressed into a single
# list/dictionary/structure. Instead each C file name **MUST** match each
# binary file name. This would be handled differently if maintaining the
# autoconfig build was not a **MUST** (in which case, the name of the file and
# its binary should match, leaving us with a single list!)
set(test-c-files
    lp-io-test.c
    mapping_test.c
    jobmap-test.c
    map-ctx-test.c
    modelnet-prio-sched-test.c
    modelnet-test-dragonfly.c
    modelnet-test.c
    resource-test.c
    rc-stack-test.c
    modelnet-p2p-bw.c
    modelnet-simplep2p-test.c
    local-storage-model-test.c
    )

set(test-bin-names
    lp-io-test
    mapping_test
    jobmap-test
    map-ctx-test
    modelnet-prio-sched-test
    modelnet-test-dragonfly
    modelnet-test
    resource-test
    rc-stack-test
    modelnet-p2p-bw
    modelnet-simplep2p-test
    lsm-test
    )

foreach(testname cfile IN ZIP_LISTS test-bin-names test-c-files)
    add_executable(${testname} ${cfile})
    target_link_libraries(${testname} PUBLIC codes)
endforeach()

# Additional binary which is not self contained
add_executable(codes-workload-test
    workload/codes-workload-test.c
    workload/codes-workload-test-svr-lp.c
    workload/codes-workload-test-cn-lp.c
    )
target_link_libraries(codes-workload-test PUBLIC codes)

# Tests are also not consistent with the files to compile, but
# that's ok, there are more tests than binary files
set(test-shell-files
    # All binaries have an associated sh test script
    lp-io-test.sh
    mapping_test.sh
    jobmap-test.sh
    map-ctx-test.sh
    modelnet-prio-sched-test.sh
    modelnet-test-dragonfly.sh
    modelnet-test.sh
    resource-test.sh
    modelnet-p2p-bw-loggp.sh
    modelnet-simplep2p-test.sh
    rc-stack-test.sh
    lsm-test.sh
    # These tests correspond to archived models / no binaries are being generated by CMake
    #modelnet-test-dragonfly-custom-synthetic.sh
    #modelnet-test-dragonfly-dally-synthetic.sh
    #modelnet-test-dragonfly-plus-synthetic.sh
    modelnet-test-torus.sh
    modelnet-test-em.sh
    modelnet-test-loggp.sh
    modelnet-test-slimfly.sh
    # These tests are not supported by the makefile/autoconf machinery either
    #modelnet-test-dragonfly-custom-traces.sh
    #modelnet-test-dragonfly-traces.sh
    #modelnet-test-slimfly-traces.sh
    #modelnet-test-torus-traces.sh
    modelnet-test-dragonfly-synthetic.sh
    modelnet-test-fattree-synthetic.sh
    modelnet-test-slimfly-synthetic.sh
    workload/codes-workload-test.sh
    example-ping-pong-determinism.sh
    example-ping-pong-surrogate-1.sh
    example-ping-pong-surrogate-2.sh
    example-ping-pong-surrogate-3.sh
    example-ping-pong-no-logging.sh
    example-ping-pong-surrogate-determinism-1.sh
    example-ping-pong-surrogate-determinism-2.sh
    )

configure_file(conf/union-milc-jacobi-workload/dfdally-72-par.conf.in conf/union-milc-jacobi-workload/dfdally-72-par.conf.in @ONLY)

if(USE_UNION)
    list(APPEND test-shell-files
        union-workload-test-surrogate.sh
        union-workload-test-surrogate-fails.sh
        #union-workload-test-surrogate-parallel.sh
        #union-workload-test-surrogate-parallel-deterministic-1.sh
        #union-workload-test-surrogate-parallel-deterministic-2.sh
    )
endif()

foreach(testname ${test-shell-files})
    add_test(NAME ${testname}
        COMMAND "${CMAKE_CURRENT_BINARY_DIR}/run-test.sh" "${CMAKE_CURRENT_SOURCE_DIR}/${testname}"
        WORKING_DIRECTORY "${CODES_BINARY_DIR}")
endforeach()
